name: File changes
on:
   push:
      branches:
        - main
env:
   layer-changes: 0        
jobs:
  activate-workflow-layer:
    name: Detect layer changes
    runs-on: ubuntu-latest
    outputs:
        layer_changes: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
    steps: 
      - uses: actions/checkout@v3   
      - name: Run changed-files with dir_names for layers
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35
        with:
          dir_names: true
          json: true
          base_sha: ${{ github.base_ref }}
          json_raw_format: true
          files_ignore: .github
          files: layer*         
      - name: List all changed files
        run: |
           i=0
           for file in ${{ steps.changed-files-dir-names.outputs.all_changed_files }}; do
              ((i=i+1))
           done 
           echo i: $i
           echo ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
  activate-workflow-lambda:
    name: Detect lambda changes
    runs-on: ubuntu-latest
    outputs:
      lambda_changes: ${{ steps.changed-files-dir-names.outputs.all_changed_files }}
    steps: 
      - uses: actions/checkout@v3   
      - name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v35
        with:
          dir_names: true
          json: true
          base_sha: ${{ github.base_ref }}
          json_raw_format: true
          files_ignore: |
                .github
                layer*
      - name: List all changed files
        run: echo ${{ steps.changed-files-dir-names.outputs.all_changed_files }}  
  
  check-all-changes:
    name: check changes in specific folder
    needs: [activate-workflow-layer, activate-workflow-lambda]
    runs-on: ubuntu-latest
    outputs:
      deploy_flow: ${{ steps.changed-files-dir-names.outputs.deploy_flow }}
    steps:
      - name: Check if changes in layer or lambda
        id: changed-files-dir-names
        run: |
          if ${{ needs.activate-workflow-layer.outputs.layer_changes != '[]' && needs.activate-workflow-lambda.outputs.lambda_changes != '[]'}} 
          then
           echo "deploy_flow=all" >> $GITHUB_OUTPUT 
          fi
          if ${{ needs.activate-workflow-layer.outputs.layer_changes != '[]' && needs.activate-workflow-lambda.outputs.lambda_changes == '[]'}} 
          then
           echo "deploy_flow=layer" >> $GITHUB_OUTPUT 
          fi
          if ${{ needs.activate-workflow-layer.outputs.layer_changes == '[]' && needs.activate-workflow-lambda.outputs.lambda_changes != '[]'}} 
          then
           echo "deploy_flow=lambda" >> $GITHUB_OUTPUT 
          fi
          if ${{ needs.activate-workflow-layer.outputs.layer_changes == '[]' && needs.activate-workflow-lambda.outputs.lambda_changes == '[]'}} 
          then
           echo "deploy_flow=none" >> $GITHUB_OUTPUT 
          fi
        shell: bash 
  run-layer-flow:
    name: Changes on layers - Deploy layer flow
    needs: [check-all-changes, activate-workflow-layer]
    if: ${{ needs.check-all-changes.outputs.deploy_flow == 'layer' }}
    strategy:
      matrix:
       version: ${{ fromJSON(needs.activate-workflow-layer.outputs.layer_changes) }}
    uses: ./.github/workflows/reusable-workflow.yml
    with:
      resource: ${{ (matrix.version) }}
  run-lambda-flow:
    name: Changes on lambdas - Deploy lambda flow
    needs: [check-all-changes, activate-workflow-lambda]
    runs-on: ubuntu-latest
    if: ${{ needs.check-all-changes.outputs.deploy_flow == 'lambda' }}
    steps:
       - uses: actions/checkout@v3
       - run: |
             mkdir /tmp/files
             cd /tmp/files
             curl https://examples.onelinerhub.com/file.zip -o tmp.zip && unzip tmp.zip && rm tmp.zip 
             ls -la
       - name: Cache Primes
         id: restore-build
         uses: actions/cache@v3
         with:
          path: /tmp/files
          key: layer-cache    
       - run: echo ${{ github.ref_name}}
  call-workflow:
    name: call workflow for lambda
    needs: [run-lambda-flow, activate-workflow-lambda]
    strategy:
      matrix:
       version: ${{ fromJSON(needs.activate-workflow-lambda.outputs.lambda_changes) }}
    uses: ./.github/workflows/reusable-workflow.yml
    with:
      resource: ${{ (matrix.version) }}
  
  run-complete-flow-layer:
    name: Complete Workflow for layer
    needs: [check-all-changes, activate-workflow-layer]
    if: ${{ needs.check-all-changes.outputs.deploy_flow == 'all' }}
    strategy:
      matrix:
       version: ${{ fromJSON(needs.activate-workflow-layer.outputs.layer_changes) }}
    uses: ./.github/workflows/reusable-workflow.yml
    with:
      resource: ${{ (matrix.version) }}
  
  run-complete-flow-lambda:
    name: Complete Workflow for lambda  
    needs: [run-complete-flow-layer, activate-workflow-lambda]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
            mkdir /tmp/files
            cd /tmp/files
            curl https://examples.onelinerhub.com/file.zip -o tmp.zip && unzip tmp.zip && rm tmp.zip 
            ls -la
      - name: Cache Primes
        id: restore-build
        uses: actions/cache@v3
        with:
         path: /tmp/files
         key: layer-cache    
      - run: echo ${{ github.ref_name}}
  run-coplete-workflow-lambda-deploy:
    name: call workflow for lambda
    needs: [run-complete-flow-lambda, activate-workflow-lambda]
    strategy:
      matrix:
        version: ${{ fromJSON(needs.activate-workflow-lambda.outputs.lambda_changes) }}
    uses: ./.github/workflows/reusable-workflow.yml
    with:
      resource: ${{ (matrix.version) }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [call-workflow, run-coplete-workflow-lambda-deploy]
    if: always()
    steps:
        - name: Check out code
          uses: actions/checkout@v3
            
        - name: Cleanup
          run: |
              gh extension install actions/gh-actions-cache
              
              REPO=${{ github.repository }}
              BRANCH="${{ github.ref_name }}"
    
              echo "Fetching list of cache key"
              cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
    
              ## Setting this to not fail the workflow while deleting cache keys. 
              set +e
              echo "Deleting caches..."
              for cacheKey in $cacheKeysForPR
              do
                  gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
              done
              echo "Done"
          env:
            GH_TOKEN: ${{ secrets.PAT }}           
  summary:
    name: Job Summary
    runs-on: ubuntu-latest
    needs: cleanup
    if: always()
    steps:
      - name: Generate list using Markdown
        run: |
          echo '### Deployment complete! :rocket: ' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Number of layer deployed" >> $GITHUB_STEP_SUMMARY
          echo "- Number of lambda deployed" >> $GITHUB_STEP_SUMMARY
          echo "- Pushed by: @${{ github.actor }}, Action: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY  

     